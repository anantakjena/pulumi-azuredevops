{
    "name": "azuredevops",
    "description": "A Pulumi package for creating and managing Azure DevOps.",
    "keywords": [
        "pulumi",
        "azuredevops"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`azuredevops` Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuredevops).",
    "repository": "https://github.com/pulumi/pulumi-azuredevops",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_PERSONAL_ACCESS_TOKEN"
                    ]
                }
            }
        }
    },
    "types": {
        "azuredevops:/AzureRMCredentials:AzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkeyHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid",
                "serviceprincipalkey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serviceprincipalid",
                        "serviceprincipalkey",
                        "serviceprincipalkeyHash"
                    ]
                }
            }
        },
        "azuredevops:/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewrs needed to approve.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Controls whether or not the submitter's vote counts. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "reviewerCount",
                "scopes"
            ]
        },
        "azuredevops:/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forks": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "override": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests form forms of this repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket`. Defaults to `Github`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:/GitHubAuthOauth:GitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:/GitHubAuthPersonal:GitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Github.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean`, or `Import`. Defaults to `Uninitialized`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type type of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:/KubernetesAzureSubscription:KubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group id, to which the Kubernetes cluster is deployed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:/KubernetesKubeconfig:KubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfigHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kubeConfig",
                        "kubeConfigHash"
                    ]
                }
            }
        },
        "azuredevops:/KubernetesServiceAccount:KubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCertHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCert",
                        "caCertHash",
                        "token",
                        "tokenHash"
                    ]
                }
            }
        },
        "azuredevops:/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEndpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expires": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Project name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forks": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests form forms of this repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket`. Defaults to `Github`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:Core/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Project name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Identities/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEndpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expires": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewrs needed to approve.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Controls whether or not the submitter's vote counts. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "reviewerCount",
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Repository/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean`, or `Import`. Defaults to `Uninitialized`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type type of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkeyHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid",
                "serviceprincipalkey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serviceprincipalid",
                        "serviceprincipalkey",
                        "serviceprincipalkeyHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Github.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group id, to which the Kubernetes cluster is deployed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfigHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kubeConfig",
                        "kubeConfigHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCertHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCert",
                        "caCertHash",
                        "token",
                        "tokenHash"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the azuredevops package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_PERSONAL_ACCESS_TOKEN"
                    ]
                }
            }
        }
    },
    "resources": {
        "azuredevops:Agent/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = new azuredevops.Pool(\"pool\", {\n    autoProvision: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.Pool(\"pool\", auto_provision=False)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = new AzureDevOps.Pool(\"pool\", new AzureDevOps.PoolArgs\n        {\n            AutoProvision = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"pool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-5.1)\n",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Pool has been deprecated in favor of azuredevops.Pool"
        },
        "azuredevops:Agent/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivelant to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipeliens in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst pool = azuredevops.getPool({\n    name: \"contoso-pool\",\n});\nconst queue = new azuredevops.Queue(\"queue\", {\n    projectId: project.id,\n    agentPoolId: pool.then(pool =\u003e pool.id),\n});\n// Grant acccess to queue to all pipelines in the project\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: queue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\npool = azuredevops.get_pool(name=\"contoso-pool\")\nqueue = azuredevops.Queue(\"queue\",\n    project_id=project.id,\n    agent_pool_id=pool.id)\n# Grant acccess to queue to all pipelines in the project\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"contoso-pool\",\n        }));\n        var queue = new AzureDevOps.Queue(\"queue\", new AzureDevOps.QueueArgs\n        {\n            ProjectId = project.Id,\n            AgentPoolId = pool.Apply(pool =\u003e pool.Id),\n        });\n        // Grant acccess to queue to all pipelines in the project\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = queue.Id,\n            Type = \"queue\",\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"contoso-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueue, err := azuredevops.NewQueue(ctx, \"queue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tAgentPoolId: pulumi.String(pool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: queue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-5.1)\n",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "requiredInputs": [
                "agentPoolId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Queue has been deprecated in favor of azuredevops.Queue"
        },
        "azuredevops:Build/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-5.1)\n",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration Integration trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration Integration trigger.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.build.BuildDefinition has been deprecated in favor of azuredevops.BuildDefinition"
        },
        "azuredevops:Core/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    projectName: \"Test Project\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    project_name=\"Test Project\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Features = \n            {\n                { \"artifacts\", \"disabled\" },\n                { \"testplans\", \"disabled\" },\n            },\n            ProjectName = \"Test Project\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            WorkItemTemplate = \"Agile\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Test Project Description\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tProjectName:      pulumi.String(\"Test Project\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Defaults to `Agile`.\n"
                }
            },
            "required": [
                "processTemplateId",
                "projectName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Defaults to `Agile`.\n"
                }
            },
            "requiredInputs": [
                "projectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Defaults to `Agile`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.Project has been deprecated in favor of azuredevops.Project"
        },
        "azuredevops:Core/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst tf-project-test-001 = azuredevops.getProject({\n    projectName: \"Test Project\",\n});\nconst my_project_features = new azuredevops.ProjectFeatures(\"my-project-features\", {\n    projectId: tf_project_test_001.then(tf_project_test_001 =\u003e tf_project_test_001.id),\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntf_project_test_001 = azuredevops.get_project(project_name=\"Test Project\")\nmy_project_features = azuredevops.ProjectFeatures(\"my-project-features\",\n    project_id=tf_project_test_001.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf_project_test_001 = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        }));\n        var my_project_features = new AzureDevOps.ProjectFeatures(\"my-project-features\", new AzureDevOps.ProjectFeaturesArgs\n        {\n            ProjectId = tf_project_test_001.Apply(tf_project_test_001 =\u003e tf_project_test_001.Id),\n            Features = \n            {\n                { \"testplans\", \"disabled\" },\n                { \"artifacts\", \"enabled\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttf_project_test_001, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"Test Project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"my_project_features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: pulumi.String(tf_project_test_001.Id),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.ProjectFeatures has been deprecated in favor of azuredevops.ProjectFeatures"
        },
        "azuredevops:Entitlement/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"foo@contoso.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user%20entitlements/add?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.entitlement.User has been deprecated in favor of azuredevops.User"
        },
        "azuredevops:Identities/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.Group has been deprecated in favor of azuredevops.Group"
        },
        "azuredevops:Identities/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst user = new azuredevops.User(\"user\", {principalName: \"foo@contoso.com\"});\nconst group = project.id.apply(id =\u003e azuredevops.getGroup({\n    projectId: id,\n    name: \"Build Administrators\",\n}));\nconst membership = new azuredevops.GroupMembership(\"membership\", {\n    group: group.descriptor,\n    members: [user.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\ngroup = project.id.apply(lambda id: azuredevops.get_group(project_id=id,\n    name=\"Build Administrators\"))\nmembership = azuredevops.GroupMembership(\"membership\",\n    group=group.descriptor,\n    members=[user.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n        var @group = project.Id.Apply(id =\u003e AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = id,\n            Name = \"Build Administrators\",\n        }));\n        var membership = new AzureDevOps.GroupMembership(\"membership\", new AzureDevOps.GroupMembershipArgs\n        {\n            Group = @group.Apply(@group =\u003e @group.Descriptor),\n            Members = \n            {\n                user.Descriptor,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"membership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: group.ApplyT(func(group azuredevops.LookupGroupResult) (string, error) {\n\t\t\t\treturn group.Descriptor, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tuser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-5.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.GroupMembership has been deprecated in favor of azuredevops.GroupMembership"
        },
        "azuredevops:Pipeline/variableGroup:VariableGroup": {
            "description": "Manages variable groups within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst variablegroup = new azuredevops.VariableGroup(\"variablegroup\", {\n    projectId: project.id,\n    description: \"Test Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key\",\n            value: \"value\",\n        },\n        {\n            name: \"Account Password\",\n            value: \"p@ssword123\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nvariablegroup = azuredevops.VariableGroup(\"variablegroup\",\n    project_id=project.id,\n    description=\"Test Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key\",\n            value=\"value\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"Account Password\",\n            value=\"p@ssword123\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var variablegroup = new AzureDevOps.VariableGroup(\"variablegroup\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Test Variable Group Description\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"key\",\n                    Value = \"value\",\n                },\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"Account Password\",\n                    Value = \"p@ssword123\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"variablegroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Test Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key\"),\n\t\t\t\t\tValue: pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:     pulumi.String(\"Account Password\"),\n\t\t\t\t\tValue:    pulumi.String(\"p@ssword123\"),\n\t\t\t\t\tIsSecret: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-5.1)\n* [Azure DevOps Service REST API 5.1 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.pipeline.VariableGroup has been deprecated in favor of azuredevops.VariableGroup"
        },
        "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst buildDefinition = new azuredevops.BuildDefinition(\"buildDefinition\", {\n    projectId: project.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: git.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst branchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Don't break the build!\",\n        buildDefinitionId: buildDefinition.id,\n        validDuration: 720,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbuild_definition = azuredevops.BuildDefinition(\"buildDefinition\",\n    project_id=project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nbranch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Don't break the build!\",\n        build_definition_id=build_definition.id,\n        valid_duration=720,\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var buildDefinition = new AzureDevOps.BuildDefinition(\"buildDefinition\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = git.Id,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n        });\n        var branchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", new AzureDevOps.BranchPolicyBuildValidationArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n            {\n                DisplayName = \"Don't break the build!\",\n                BuildDefinitionId = buildDefinition.Id,\n                ValidDuration = 720,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"buildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   git.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"branchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Don't break the build!\"),\n\t\t\t\tBuildDefinitionId: buildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tScopes: azuredevops.BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyBuildValidation has been deprecated in favor of azuredevops.BranchPolicyBuildValidation"
        },
        "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Manages a minimum reviewer branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 2,\n        submitterCanVote: false,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=2,\n        submitter_can_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", new AzureDevOps.BranchPolicyMinReviewersArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n            {\n                ReviewerCount = 2,\n                SubmitterCanVote = false,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"branchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:    pulumi.Int(2),\n\t\t\t\tSubmitterCanVote: pulumi.Bool(false),\n\t\t\t\tScopes: azuredevops.BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyMinReviewers has been deprecated in favor of azuredevops.BranchPolicyMinReviewers"
        },
        "azuredevops:Repository/git:Git": {
            "description": "Manages a git repository within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create Git repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst repo = new azuredevops.Git(\"repo\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nrepo = azuredevops.Git(\"repo\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var repo = new AzureDevOps.Git(\"repo\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGit(ctx, \"repo\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Create Fork of another Azure DevOps Git repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repo = new azuredevops.Git(\"repo\", {\n    projectId: azuredevops_project.project.id,\n    parentId: azuredevops_git_repository.parent.id,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/repositories?view=azure-devops-rest-5.1)\n",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.repository.Git has been deprecated in favor of azuredevops.Git"
        },
        "azuredevops:Security/resourceAuthorization:ResourceAuthorization": {
            "description": "## # azuredevops.ResourceAuthorization\n\nManages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst bitbucketAccount = new azuredevops.BitBucket(\"bitbucketAccount\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: bitbucketAccount.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nbitbucket_account = azuredevops.BitBucket(\"bitbucketAccount\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=bitbucket_account.id,\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var bitbucketAccount = new AzureDevOps.BitBucket(\"bitbucketAccount\", new AzureDevOps.BitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = bitbucketAccount.Id,\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbitbucketAccount, err := azuredevops.NewBitBucket(ctx, \"bitbucketAccount\", \u0026azuredevops.BitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: bitbucketAccount.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.security.ResourceAuthorization has been deprecated in favor of azuredevops.ResourceAuthorization"
        },
        "azuredevops:ServiceEndpoint/azureRM:AzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Manual AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.AzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"TestServiceRM\",\n    credentials: {\n        serviceprincipalid: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurermSubscriptionId: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurermSubscriptionName: \"Sample Subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.AzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"TestServiceRM\",\n    credentials=azuredevops.AzureRMCredentialsArgs(\n        serviceprincipalid=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurerm_subscription_id=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurerm_subscription_name=\"Sample Subscription\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.AzureRM(\"endpointazure\", new AzureDevOps.AzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"TestServiceRM\",\n            Credentials = new AzureDevOps.Inputs.AzureRMCredentialsArgs\n            {\n                Serviceprincipalid = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n                Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n            AzurermSpnTenantid = \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n            AzurermSubscriptionId = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n            AzurermSubscriptionName = \"Sample Subscription\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewAzureRM(ctx, \"endpointazure\", \u0026azuredevops.AzureRMArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"TestServiceRM\"),\n\t\t\tCredentials: \u0026azuredevops.AzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Sample Subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.AzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"TestServiceRM\",\n    azurermSpnTenantid: \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurermSubscriptionId: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurermSubscriptionName: \"Microsoft Azure DEMO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.AzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"TestServiceRM\",\n    azurerm_spn_tenantid=\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurerm_subscription_id=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurerm_subscription_name=\"Microsoft Azure DEMO\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.AzureRM(\"endpointazure\", new AzureDevOps.AzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"TestServiceRM\",\n            AzurermSpnTenantid = \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n            AzurermSubscriptionId = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n            AzurermSubscriptionName = \"Microsoft Azure DEMO\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewAzureRM(ctx, \"endpointazure\", \u0026azuredevops.AzureRMArgs{\n\t\t\tProjectId:               project.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"TestServiceRM\"),\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Microsoft Azure DEMO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The subscription Id of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.AzureRM has been deprecated in favor of azuredevops.AzureRM"
        },
        "azuredevops:ServiceEndpoint/bitBucket:BitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.BitBucket(\"serviceendpoint\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.BitBucket(\"serviceendpoint\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.BitBucket(\"serviceendpoint\", new AzureDevOps.BitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBitBucket(ctx, \"serviceendpoint\", \u0026azuredevops.BitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "passwordHash",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.BitBucket has been deprecated in favor of azuredevops.BitBucket"
        },
        "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\n// dockerhub registry service connection\nconst dockerhubregistry = new azuredevops.DockerRegistry(\"dockerhubregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Hub\",\n    dockerUsername: \"sample\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst otherregistry = new azuredevops.DockerRegistry(\"otherregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\n# dockerhub registry service connection\ndockerhubregistry = azuredevops.DockerRegistry(\"dockerhubregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Hub\",\n    docker_username=\"sample\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\notherregistry = azuredevops.DockerRegistry(\"otherregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        // dockerhub registry service connection\n        var dockerhubregistry = new AzureDevOps.DockerRegistry(\"dockerhubregistry\", new AzureDevOps.DockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Hub\",\n            DockerUsername = \"sample\",\n            DockerEmail = \"email@example.com\",\n            DockerPassword = \"12345\",\n            RegistryType = \"DockerHub\",\n        });\n        // other docker registry service connection\n        var otherregistry = new AzureDevOps.DockerRegistry(\"otherregistry\", new AzureDevOps.DockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Registry\",\n            DockerRegistry = \"https://sample.azurecr.io/v1\",\n            DockerUsername = \"sample\",\n            DockerPassword = \"12345\",\n            RegistryType = \"Others\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewDockerRegistry(ctx, \"dockerhubregistry\", \u0026azuredevops.DockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewDockerRegistry(ctx, \"otherregistry\", \u0026azuredevops.DockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n* [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerPasswordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'docker_password'\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerPasswordHash",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n"
                    },
                    "dockerPasswordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'docker_password'\n"
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.DockerRegistry has been deprecated in favor of azuredevops.DockerRegistry"
        },
        "azuredevops:ServiceEndpoint/gitHub:GitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpointGh1 = new azuredevops.GitHub(\"serviceendpointGh1\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample GithHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint_gh1 = azuredevops.GitHub(\"serviceendpointGh1\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample GithHub Personal Access Token\",\n    auth_personal=azuredevops.GitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpointGh1 = new AzureDevOps.GitHub(\"serviceendpointGh1\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample GithHub Personal Access Token\",\n            AuthPersonal = new AzureDevOps.Inputs.GitHubAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitHub(ctx, \"serviceendpointGh1\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026azuredevops.GitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh2 = new azuredevops.GitHub(\"serviceendpointGh2\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Grant\",\n    authOauth: {\n        oauthConfigurationId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh2 = azuredevops.GitHub(\"serviceendpointGh2\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Grant\",\n    auth_oauth=azuredevops.GitHubAuthOauthArgs(\n        oauth_configuration_id=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh2 = new AzureDevOps.GitHub(\"serviceendpointGh2\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Grant\",\n            AuthOauth = new AzureDevOps.Inputs.GitHubAuthOauthArgs\n            {\n                OauthConfigurationId = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitHub(ctx, \"serviceendpointGh2\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Grant\"),\n\t\t\tAuthOauth: \u0026azuredevops.GitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh3 = new azuredevops.GitHub(\"serviceendpointGh3\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Apps: Azure Pipelines\",\n    description: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh3 = azuredevops.GitHub(\"serviceendpointGh3\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Apps: Azure Pipelines\",\n    description=\"\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh3 = new AzureDevOps.GitHub(\"serviceendpointGh3\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Apps: Azure Pipelines\",\n            Description = \"\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitHub(ctx, \"serviceendpointGh3\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                        "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.GitHub has been deprecated in favor of azuredevops.GitHub"
        },
        "azuredevops:ServiceEndpoint/kubernetes:Kubernetes": {
            "description": "## # azuredevops.Kubernetes\n\nManages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                        },
                        "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                        },
                        "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                        },
                        "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.Kubernetes has been deprecated in favor of azuredevops.Kubernetes"
        },
        "azuredevops:index/azureRM:AzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Manual AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.AzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"TestServiceRM\",\n    credentials: {\n        serviceprincipalid: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurermSubscriptionId: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurermSubscriptionName: \"Sample Subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.AzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"TestServiceRM\",\n    credentials=azuredevops.AzureRMCredentialsArgs(\n        serviceprincipalid=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurerm_subscription_id=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurerm_subscription_name=\"Sample Subscription\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.AzureRM(\"endpointazure\", new AzureDevOps.AzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"TestServiceRM\",\n            Credentials = new AzureDevOps.Inputs.AzureRMCredentialsArgs\n            {\n                Serviceprincipalid = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n                Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n            AzurermSpnTenantid = \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n            AzurermSubscriptionId = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n            AzurermSubscriptionName = \"Sample Subscription\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewAzureRM(ctx, \"endpointazure\", \u0026azuredevops.AzureRMArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"TestServiceRM\"),\n\t\t\tCredentials: \u0026azuredevops.AzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Sample Subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.AzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"TestServiceRM\",\n    azurermSpnTenantid: \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurermSubscriptionId: \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurermSubscriptionName: \"Microsoft Azure DEMO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.AzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"TestServiceRM\",\n    azurerm_spn_tenantid=\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n    azurerm_subscription_id=\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n    azurerm_subscription_name=\"Microsoft Azure DEMO\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.AzureRM(\"endpointazure\", new AzureDevOps.AzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"TestServiceRM\",\n            AzurermSpnTenantid = \"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\",\n            AzurermSubscriptionId = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\",\n            AzurermSubscriptionName = \"Microsoft Azure DEMO\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewAzureRM(ctx, \"endpointazure\", \u0026azuredevops.AzureRMArgs{\n\t\t\tProjectId:               project.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"TestServiceRM\"),\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"xxxxxxx-xxxx-xxx-xxxxx-xxxxxxxx\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Microsoft Azure DEMO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The subscription Id of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:/AzureRMCredentials:AzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/azureRM:AzureRM"
                }
            ]
        },
        "azuredevops:index/bitBucket:BitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.BitBucket(\"serviceendpoint\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.BitBucket(\"serviceendpoint\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.BitBucket(\"serviceendpoint\", new AzureDevOps.BitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBitBucket(ctx, \"serviceendpoint\", \u0026azuredevops.BitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "passwordHash",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/bitBucket:BitBucket"
                }
            ]
        },
        "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst buildDefinition = new azuredevops.BuildDefinition(\"buildDefinition\", {\n    projectId: project.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: git.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst branchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Don't break the build!\",\n        buildDefinitionId: buildDefinition.id,\n        validDuration: 720,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbuild_definition = azuredevops.BuildDefinition(\"buildDefinition\",\n    project_id=project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nbranch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Don't break the build!\",\n        build_definition_id=build_definition.id,\n        valid_duration=720,\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var buildDefinition = new AzureDevOps.BuildDefinition(\"buildDefinition\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = git.Id,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n        });\n        var branchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", new AzureDevOps.BranchPolicyBuildValidationArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n            {\n                DisplayName = \"Don't break the build!\",\n                BuildDefinitionId = buildDefinition.Id,\n                ValidDuration = 720,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"buildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   git.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"branchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Don't break the build!\"),\n\t\t\t\tBuildDefinitionId: buildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tScopes: azuredevops.BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation"
                }
            ]
        },
        "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Manages a minimum reviewer branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 2,\n        submitterCanVote: false,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=2,\n        submitter_can_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", new AzureDevOps.BranchPolicyMinReviewersArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n            {\n                ReviewerCount = 2,\n                SubmitterCanVote = false,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"branchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:    pulumi.Int(2),\n\t\t\t\tSubmitterCanVote: pulumi.Bool(false),\n\t\t\t\tScopes: azuredevops.BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers"
                }
            ]
        },
        "azuredevops:index/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-5.1)\n",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Hosted Ubuntu 1604`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration Integration trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration Integration trigger.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Build/buildDefinition:BuildDefinition"
                }
            ]
        },
        "azuredevops:index/dockerRegistry:DockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\n// dockerhub registry service connection\nconst dockerhubregistry = new azuredevops.DockerRegistry(\"dockerhubregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Hub\",\n    dockerUsername: \"sample\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst otherregistry = new azuredevops.DockerRegistry(\"otherregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\n# dockerhub registry service connection\ndockerhubregistry = azuredevops.DockerRegistry(\"dockerhubregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Hub\",\n    docker_username=\"sample\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\notherregistry = azuredevops.DockerRegistry(\"otherregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        // dockerhub registry service connection\n        var dockerhubregistry = new AzureDevOps.DockerRegistry(\"dockerhubregistry\", new AzureDevOps.DockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Hub\",\n            DockerUsername = \"sample\",\n            DockerEmail = \"email@example.com\",\n            DockerPassword = \"12345\",\n            RegistryType = \"DockerHub\",\n        });\n        // other docker registry service connection\n        var otherregistry = new AzureDevOps.DockerRegistry(\"otherregistry\", new AzureDevOps.DockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Registry\",\n            DockerRegistry = \"https://sample.azurecr.io/v1\",\n            DockerUsername = \"sample\",\n            DockerPassword = \"12345\",\n            RegistryType = \"Others\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewDockerRegistry(ctx, \"dockerhubregistry\", \u0026azuredevops.DockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewDockerRegistry(ctx, \"otherregistry\", \u0026azuredevops.DockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n* [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerPasswordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'docker_password'\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerPasswordHash",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n"
                    },
                    "dockerPasswordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'docker_password'\n"
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry"
                }
            ]
        },
        "azuredevops:index/git:Git": {
            "description": "Manages a git repository within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create Git repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst repo = new azuredevops.Git(\"repo\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nrepo = azuredevops.Git(\"repo\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var repo = new AzureDevOps.Git(\"repo\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGit(ctx, \"repo\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Create Fork of another Azure DevOps Git repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repo = new azuredevops.Git(\"repo\", {\n    projectId: azuredevops_project.project.id,\n    parentId: azuredevops_git_repository.parent.id,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/repositories?view=azure-devops-rest-5.1)\n",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Repository/git:Git"
                }
            ]
        },
        "azuredevops:index/gitHub:GitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    projectName: \"Sample Project\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpointGh1 = new azuredevops.GitHub(\"serviceendpointGh1\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample GithHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    project_name=\"Sample Project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint_gh1 = azuredevops.GitHub(\"serviceendpointGh1\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample GithHub Personal Access Token\",\n    auth_personal=azuredevops.GitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpointGh1 = new AzureDevOps.GitHub(\"serviceendpointGh1\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample GithHub Personal Access Token\",\n            AuthPersonal = new AzureDevOps.Inputs.GitHubAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName:      pulumi.String(\"Sample Project\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitHub(ctx, \"serviceendpointGh1\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026azuredevops.GitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh2 = new azuredevops.GitHub(\"serviceendpointGh2\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Grant\",\n    authOauth: {\n        oauthConfigurationId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh2 = azuredevops.GitHub(\"serviceendpointGh2\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Grant\",\n    auth_oauth=azuredevops.GitHubAuthOauthArgs(\n        oauth_configuration_id=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh2 = new AzureDevOps.GitHub(\"serviceendpointGh2\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Grant\",\n            AuthOauth = new AzureDevOps.Inputs.GitHubAuthOauthArgs\n            {\n                OauthConfigurationId = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitHub(ctx, \"serviceendpointGh2\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Grant\"),\n\t\t\tAuthOauth: \u0026azuredevops.GitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh3 = new azuredevops.GitHub(\"serviceendpointGh3\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Apps: Azure Pipelines\",\n    description: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh3 = azuredevops.GitHub(\"serviceendpointGh3\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Apps: Azure Pipelines\",\n    description=\"\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh3 = new AzureDevOps.GitHub(\"serviceendpointGh3\", new AzureDevOps.GitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Apps: Azure Pipelines\",\n            Description = \"\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitHub(ctx, \"serviceendpointGh3\", \u0026azuredevops.GitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:/GitHubAuthOauth:GitHubAuthOauth",
                        "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:/GitHubAuthPersonal:GitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/gitHub:GitHub"
                }
            ]
        },
        "azuredevops:index/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the   `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/group:Group"
                }
            ]
        },
        "azuredevops:index/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst user = new azuredevops.User(\"user\", {principalName: \"foo@contoso.com\"});\nconst group = project.id.apply(id =\u003e azuredevops.getGroup({\n    projectId: id,\n    name: \"Build Administrators\",\n}));\nconst membership = new azuredevops.GroupMembership(\"membership\", {\n    group: group.descriptor,\n    members: [user.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\ngroup = project.id.apply(lambda id: azuredevops.get_group(project_id=id,\n    name=\"Build Administrators\"))\nmembership = azuredevops.GroupMembership(\"membership\",\n    group=group.descriptor,\n    members=[user.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n        var @group = project.Id.Apply(id =\u003e AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = id,\n            Name = \"Build Administrators\",\n        }));\n        var membership = new AzureDevOps.GroupMembership(\"membership\", new AzureDevOps.GroupMembershipArgs\n        {\n            Group = @group.Apply(@group =\u003e @group.Descriptor),\n            Members = \n            {\n                user.Descriptor,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"membership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: group.ApplyT(func(group azuredevops.LookupGroupResult) (string, error) {\n\t\t\t\treturn group.Descriptor, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tuser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-5.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n* `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n* `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/groupMembership:GroupMembership"
                }
            ]
        },
        "azuredevops:index/kubernetes:Kubernetes": {
            "description": "## # azuredevops.Kubernetes\n\nManages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/KubernetesAzureSubscription:KubernetesAzureSubscription"
                        },
                        "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/KubernetesKubeconfig:KubernetesKubeconfig"
                        },
                        "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/KubernetesServiceAccount:KubernetesServiceAccount"
                        },
                        "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/kubernetes:Kubernetes"
                }
            ]
        },
        "azuredevops:index/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = new azuredevops.Pool(\"pool\", {\n    autoProvision: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.Pool(\"pool\", auto_provision=False)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = new AzureDevOps.Pool(\"pool\", new AzureDevOps.PoolArgs\n        {\n            AutoProvision = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"pool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-5.1)\n",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment.  Defaults to `automation`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/pool:Pool"
                }
            ]
        },
        "azuredevops:index/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    projectName: \"Test Project\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    project_name=\"Test Project\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Features = \n            {\n                { \"artifacts\", \"disabled\" },\n                { \"testplans\", \"disabled\" },\n            },\n            ProjectName = \"Test Project\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            WorkItemTemplate = \"Agile\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Test Project Description\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tProjectName:      pulumi.String(\"Test Project\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Defaults to `Agile`.\n"
                }
            },
            "required": [
                "processTemplateId",
                "projectName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Defaults to `Agile`.\n"
                }
            },
            "requiredInputs": [
                "projectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Defaults to `Agile`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/project:Project"
                }
            ]
        },
        "azuredevops:index/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst tf-project-test-001 = azuredevops.getProject({\n    projectName: \"Test Project\",\n});\nconst my_project_features = new azuredevops.ProjectFeatures(\"my-project-features\", {\n    projectId: tf_project_test_001.then(tf_project_test_001 =\u003e tf_project_test_001.id),\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntf_project_test_001 = azuredevops.get_project(project_name=\"Test Project\")\nmy_project_features = azuredevops.ProjectFeatures(\"my-project-features\",\n    project_id=tf_project_test_001.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf_project_test_001 = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        }));\n        var my_project_features = new AzureDevOps.ProjectFeatures(\"my-project-features\", new AzureDevOps.ProjectFeaturesArgs\n        {\n            ProjectId = tf_project_test_001.Apply(tf_project_test_001 =\u003e tf_project_test_001.Id),\n            Features = \n            {\n                { \"testplans\", \"disabled\" },\n                { \"artifacts\", \"enabled\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttf_project_test_001, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"Test Project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"my_project_features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: pulumi.String(tf_project_test_001.Id),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/projectFeatures:ProjectFeatures"
                }
            ]
        },
        "azuredevops:index/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivelant to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipeliens in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Sample Project\"});\nconst pool = azuredevops.getPool({\n    name: \"contoso-pool\",\n});\nconst queue = new azuredevops.Queue(\"queue\", {\n    projectId: project.id,\n    agentPoolId: pool.then(pool =\u003e pool.id),\n});\n// Grant acccess to queue to all pipelines in the project\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: queue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Sample Project\")\npool = azuredevops.get_pool(name=\"contoso-pool\")\nqueue = azuredevops.Queue(\"queue\",\n    project_id=project.id,\n    agent_pool_id=pool.id)\n# Grant acccess to queue to all pipelines in the project\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        });\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"contoso-pool\",\n        }));\n        var queue = new AzureDevOps.Queue(\"queue\", new AzureDevOps.QueueArgs\n        {\n            ProjectId = project.Id,\n            AgentPoolId = pool.Apply(pool =\u003e pool.Id),\n        });\n        // Grant acccess to queue to all pipelines in the project\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = queue.Id,\n            Type = \"queue\",\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Sample Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"contoso-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueue, err := azuredevops.NewQueue(ctx, \"queue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tAgentPoolId: pulumi.String(pool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: queue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-5.1)\n",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "requiredInputs": [
                "agentPoolId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/queue:Queue"
                }
            ]
        },
        "azuredevops:index/resourceAuthorization:ResourceAuthorization": {
            "description": "## # azuredevops.ResourceAuthorization\n\nManages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst bitbucketAccount = new azuredevops.BitBucket(\"bitbucketAccount\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: bitbucketAccount.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nbitbucket_account = azuredevops.BitBucket(\"bitbucketAccount\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=bitbucket_account.id,\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var bitbucketAccount = new AzureDevOps.BitBucket(\"bitbucketAccount\", new AzureDevOps.BitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = bitbucketAccount.Id,\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbitbucketAccount, err := azuredevops.NewBitBucket(ctx, \"bitbucketAccount\", \u0026azuredevops.BitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: bitbucketAccount.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Security/resourceAuthorization:ResourceAuthorization"
                }
            ]
        },
        "azuredevops:index/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"foo@contoso.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user%20entitlements/add?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Entitlement/user:User"
                }
            ]
        },
        "azuredevops:index/variableGroup:VariableGroup": {
            "description": "Manages variable groups within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {projectName: \"Test Project\"});\nconst variablegroup = new azuredevops.VariableGroup(\"variablegroup\", {\n    projectId: project.id,\n    description: \"Test Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key\",\n            value: \"value\",\n        },\n        {\n            name: \"Account Password\",\n            value: \"p@ssword123\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\", project_name=\"Test Project\")\nvariablegroup = azuredevops.VariableGroup(\"variablegroup\",\n    project_id=project.id,\n    description=\"Test Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key\",\n            value=\"value\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"Account Password\",\n            value=\"p@ssword123\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            ProjectName = \"Test Project\",\n        });\n        var variablegroup = new AzureDevOps.VariableGroup(\"variablegroup\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Test Variable Group Description\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"key\",\n                    Value = \"value\",\n                },\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"Account Password\",\n                    Value = \"p@ssword123\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tProjectName: pulumi.String(\"Test Project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"variablegroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Test Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key\"),\n\t\t\t\t\tValue: pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:     pulumi.String(\"Account Password\"),\n\t\t\t\t\tValue:    pulumi.String(\"p@ssword123\"),\n\t\t\t\t\tIsSecret: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-5.1)\n* [Azure DevOps Service REST API 5.1 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:/VariableGroupKeyVault:VariableGroupKeyVault"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Pipeline/variableGroup:VariableGroup"
                }
            ]
        }
    },
    "functions": {
        "azuredevops:Agent/getPool:getPool": {
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = azuredevops.getPool({\n    name: \"Sample Agent Pool\",\n});\nexport const name = pool.then(pool =\u003e pool.name);\nexport const poolType = pool.then(pool =\u003e pool.poolType);\nexport const autoProvision = pool.then(pool =\u003e pool.autoProvision);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.get_pool(name=\"Sample Agent Pool\")\npulumi.export(\"name\", pool.name)\npulumi.export(\"poolType\", pool.pool_type)\npulumi.export(\"autoProvision\", pool.auto_provision)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"Sample Agent Pool\",\n        }));\n        this.Name = pool.Apply(pool =\u003e pool.Name);\n        this.PoolType = pool.Apply(pool =\u003e pool.PoolType);\n        this.AutoProvision = pool.Apply(pool =\u003e pool.AutoProvision);\n    }\n\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"Sample Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", pool.Name)\n\t\tctx.Export(\"poolType\", pool.PoolType)\n\t\tctx.Export(\"autoProvision\", pool.AutoProvision)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "name",
                    "poolType",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.agent.getPool has been deprecated in favor of azuredevops.getPool"
        },
        "azuredevops:Agent/getPools:getPools": {
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pools = azuredevops.getPools({});\nexport const agentPoolName = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.name));\nexport const autoProvision = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.autoProvision));\nexport const poolType = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.poolType));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npools = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in pools.agent_pools])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in pools.agent_pools])\npulumi.export(\"poolType\", [__item.pool_type for __item in pools.agent_pools])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pools = Output.Create(AzureDevOps.GetPools.InvokeAsync());\n        this.AgentPoolName = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.Name).ToList());\n        this.AutoProvision = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.AutoProvision).ToList());\n        this.PoolType = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.PoolType).ToList());\n    }\n\n    [Output(\"agentPoolName\")]\n    public Output\u003cstring\u003e AgentPoolName { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpools, err := azuredevops.GetPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []string\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat0 = append(splat0, val0.Name)\n\t\t}\n\t\tctx.Export(\"agentPoolName\", splat0)\n\t\tvar splat1 []bool\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat1 = append(splat1, val0.AutoProvision)\n\t\t}\n\t\tctx.Export(\"autoProvision\", splat1)\n\t\tvar splat2 []string\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat2 = append(splat2, val0.PoolType)\n\t\t}\n\t\tctx.Export(\"poolType\", splat2)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.agent.getPools has been deprecated in favor of azuredevops.getPools"
        },
        "azuredevops:Core/getClientConfig:getClientConfig": {
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst clientConfig = azuredevops.getClientConfig({});\nexport const orgUrl = clientConfig.then(clientConfig =\u003e clientConfig.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nclient_config = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", client_config.organization_url)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clientConfig = Output.Create(AzureDevOps.GetClientConfig.InvokeAsync());\n        this.OrgUrl = clientConfig.Apply(clientConfig =\u003e clientConfig.OrganizationUrl);\n    }\n\n    [Output(\"orgUrl\")]\n    public Output\u003cstring\u003e OrgUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientConfig, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", clientConfig.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getClientConfig has been deprecated in favor of azuredevops.getClientConfig"
        },
        "azuredevops:Core/getProject:getProject": {
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"Sample Project\",\n});\nexport const id = project.then(project =\u003e project.id);\nexport const projectName = project.then(project =\u003e project.projectName);\nexport const visibility = project.then(project =\u003e project.visibility);\nexport const versionControl = project.then(project =\u003e project.versionControl);\nexport const workItemTemplate = project.then(project =\u003e project.workItemTemplate);\nexport const processTemplateId = project.then(project =\u003e project.processTemplateId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"Sample Project\")\npulumi.export(\"id\", project.id)\npulumi.export(\"projectName\", project.project_name)\npulumi.export(\"visibility\", project.visibility)\npulumi.export(\"versionControl\", project.version_control)\npulumi.export(\"workItemTemplate\", project.work_item_template)\npulumi.export(\"processTemplateId\", project.process_template_id)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        }));\n        this.Id = project.Apply(project =\u003e project.Id);\n        this.ProjectName = project.Apply(project =\u003e project.ProjectName);\n        this.Visibility = project.Apply(project =\u003e project.Visibility);\n        this.VersionControl = project.Apply(project =\u003e project.VersionControl);\n        this.WorkItemTemplate = project.Apply(project =\u003e project.WorkItemTemplate);\n        this.ProcessTemplateId = project.Apply(project =\u003e project.ProcessTemplateId);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n    [Output(\"projectName\")]\n    public Output\u003cstring\u003e ProjectName { get; set; }\n    [Output(\"visibility\")]\n    public Output\u003cstring\u003e Visibility { get; set; }\n    [Output(\"versionControl\")]\n    public Output\u003cstring\u003e VersionControl { get; set; }\n    [Output(\"workItemTemplate\")]\n    public Output\u003cstring\u003e WorkItemTemplate { get; set; }\n    [Output(\"processTemplateId\")]\n    public Output\u003cstring\u003e ProcessTemplateId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"Sample Project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", project.Id)\n\t\tctx.Export(\"projectName\", project.ProjectName)\n\t\tctx.Export(\"visibility\", project.Visibility)\n\t\tctx.Export(\"versionControl\", project.VersionControl)\n\t\tctx.Export(\"workItemTemplate\", project.WorkItemTemplate)\n\t\tctx.Export(\"processTemplateId\", project.ProcessTemplateId)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "projectName",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getProject has been deprecated in favor of azuredevops.getProject"
        },
        "azuredevops:Core/getProjects:getProjects": {
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst test = azuredevops.getProjects({\n    projectName: \"contoso\",\n    state: \"wellFormed\",\n});\nexport const projectId = test.then(test =\u003e test.projects.map(__item =\u003e __item.projectId));\nexport const projectName = test.then(test =\u003e test.projects.map(__item =\u003e __item.name));\nexport const projectUrl = test.then(test =\u003e test.projects.map(__item =\u003e __item.projectUrl));\nexport const state = test.then(test =\u003e test.projects.map(__item =\u003e __item.state));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntest = azuredevops.get_projects(project_name=\"contoso\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in test.projects])\npulumi.export(\"projectName\", [__item.name for __item in test.projects])\npulumi.export(\"projectUrl\", [__item.project_url for __item in test.projects])\npulumi.export(\"state\", [__item.state for __item in test.projects])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(AzureDevOps.GetProjects.InvokeAsync(new AzureDevOps.GetProjectsArgs\n        {\n            ProjectName = \"contoso\",\n            State = \"wellFormed\",\n        }));\n        this.ProjectId = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.ProjectId).ToList());\n        this.ProjectName = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.Name).ToList());\n        this.ProjectUrl = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.ProjectUrl).ToList());\n        this.State = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.State).ToList());\n    }\n\n    [Output(\"projectId\")]\n    public Output\u003cstring\u003e ProjectId { get; set; }\n    [Output(\"projectName\")]\n    public Output\u003cstring\u003e ProjectName { get; set; }\n    [Output(\"projectUrl\")]\n    public Output\u003cstring\u003e ProjectUrl { get; set; }\n    [Output(\"state\")]\n    public Output\u003cstring\u003e State { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"contoso\"\n\t\topt1 := \"wellFormed\"\n\t\ttest, err := azuredevops.GetProjects(ctx, \u0026azuredevops.GetProjectsArgs{\n\t\t\tProjectName: \u0026opt0,\n\t\t\tState:       \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat0 = append(splat0, val0.ProjectId)\n\t\t}\n\t\tctx.Export(\"projectId\", splat0)\n\t\tvar splat1 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat1 = append(splat1, val0.Name)\n\t\t}\n\t\tctx.Export(\"projectName\", splat1)\n\t\tvar splat2 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat2 = append(splat2, val0.ProjectUrl)\n\t\t}\n\t\tctx.Export(\"projectUrl\", splat2)\n\t\tvar splat3 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat3 = append(splat3, val0.State)\n\t\t}\n\t\tctx.Export(\"state\", splat3)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Core/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getProjects has been deprecated in favor of azuredevops.getProjects"
        },
        "azuredevops:Identities/getGroup:getGroup": {
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"contoso-project\",\n});\nconst test = project.then(project =\u003e azuredevops.getGroup({\n    projectId: project.id,\n    name: \"Test Group\",\n}));\nexport const groupId = test.then(test =\u003e test.id);\nexport const groupDescriptor = test.then(test =\u003e test.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"contoso-project\")\ntest = azuredevops.get_group(project_id=project.id,\n    name=\"Test Group\")\npulumi.export(\"groupId\", test.id)\npulumi.export(\"groupDescriptor\", test.descriptor)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"contoso-project\",\n        }));\n        var test = project.Apply(project =\u003e Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Test Group\",\n        })));\n        this.GroupId = test.Apply(test =\u003e test.Id);\n        this.GroupDescriptor = test.Apply(test =\u003e test.Descriptor);\n    }\n\n    [Output(\"groupId\")]\n    public Output\u003cstring\u003e GroupId { get; set; }\n    [Output(\"groupDescriptor\")]\n    public Output\u003cstring\u003e GroupDescriptor { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"contoso-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tProjectId: project.Id,\n\t\t\tName:      \"Test Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", test.Id)\n\t\tctx.Export(\"groupDescriptor\", test.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project Id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "projectId",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.identities.getGroup has been deprecated in favor of azuredevops.getGroup"
        },
        "azuredevops:Identities/getUsers:getUsers": {
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n// Load single user by using it's principal name\nconst user = pulumi.output(azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n}, { async: true }));\n// Load all users know inside an organization\nconst all_users = pulumi.output(azuredevops.getUsers({ async: true }));\n// Load all users know inside an organization originating from a specific source (origin)\nconst all_from_origin = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n}, { async: true }));\n// Load all users know inside an organization filtered by their subject types\nconst all_from_subject_types = pulumi.output(azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n}, { async: true }));\n// Load a single user by origin and origin ID\nconst all_from_origin_id = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nall_users = azuredevops.get_users()\nall_from_origin = azuredevops.get_users(origin=\"aad\")\nall_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nall_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n        }));\n        var all_users = Output.Create(AzureDevOps.GetUsers.InvokeAsync());\n        var all_from_origin = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n        }));\n        var all_from_subjectTypes = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            SubjectTypes = \n            {\n                \"aad\",\n                \"msa\",\n            },\n        }));\n        var all_from_origin_id = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n            OriginId = \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"contoso-user@contoso.onmicrosoft.com\"\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tPrincipalName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"aad\"\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt2 := \"aad\"\n\t\topt3 := \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\"\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin:   \u0026opt2,\n\t\t\tOriginId: \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Identities/getUsersUser:getUsersUser"
                        },
                        "description": "A list of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.identities.getUsers has been deprecated in favor of azuredevops.getUsers"
        },
        "azuredevops:Repository/getRepositories:getRepositories": {
            "description": "Use this data source to access information about an existing Git Repositories within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"contoso-project\",\n});\nconst allRepos = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    includeHidden: true,\n}));\nconst singleRepo = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    name: \"contoso-repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"contoso-project\")\nall_repos = azuredevops.get_repositories(project_id=project.id,\n    include_hidden=True)\nsingle_repo = azuredevops.get_repositories(project_id=project.id,\n    name=\"contoso-repo\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"contoso-project\",\n        }));\n        var allRepos = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            IncludeHidden = true,\n        })));\n        var singleRepo = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            Name = \"contoso-repo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"contoso-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := project.Id\n\t\topt1 := true\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId:     \u0026opt0,\n\t\t\tIncludeHidden: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt2 := project.Id\n\t\topt3 := \"contoso-repo\"\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId: \u0026opt2,\n\t\t\tName:      \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.repository.getRepositories has been deprecated in favor of azuredevops.getRepositories"
        },
        "azuredevops:index/getClientConfig:getClientConfig": {
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst clientConfig = azuredevops.getClientConfig({});\nexport const orgUrl = clientConfig.then(clientConfig =\u003e clientConfig.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nclient_config = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", client_config.organization_url)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clientConfig = Output.Create(AzureDevOps.GetClientConfig.InvokeAsync());\n        this.OrgUrl = clientConfig.Apply(clientConfig =\u003e clientConfig.OrganizationUrl);\n    }\n\n    [Output(\"orgUrl\")]\n    public Output\u003cstring\u003e OrgUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientConfig, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", clientConfig.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGroup:getGroup": {
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"contoso-project\",\n});\nconst test = project.then(project =\u003e azuredevops.getGroup({\n    projectId: project.id,\n    name: \"Test Group\",\n}));\nexport const groupId = test.then(test =\u003e test.id);\nexport const groupDescriptor = test.then(test =\u003e test.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"contoso-project\")\ntest = azuredevops.get_group(project_id=project.id,\n    name=\"Test Group\")\npulumi.export(\"groupId\", test.id)\npulumi.export(\"groupDescriptor\", test.descriptor)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"contoso-project\",\n        }));\n        var test = project.Apply(project =\u003e Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Test Group\",\n        })));\n        this.GroupId = test.Apply(test =\u003e test.Id);\n        this.GroupDescriptor = test.Apply(test =\u003e test.Descriptor);\n    }\n\n    [Output(\"groupId\")]\n    public Output\u003cstring\u003e GroupId { get; set; }\n    [Output(\"groupDescriptor\")]\n    public Output\u003cstring\u003e GroupDescriptor { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"contoso-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tProjectId: project.Id,\n\t\t\tName:      \"Test Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", test.Id)\n\t\tctx.Export(\"groupDescriptor\", test.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project Id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPool:getPool": {
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = azuredevops.getPool({\n    name: \"Sample Agent Pool\",\n});\nexport const name = pool.then(pool =\u003e pool.name);\nexport const poolType = pool.then(pool =\u003e pool.poolType);\nexport const autoProvision = pool.then(pool =\u003e pool.autoProvision);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.get_pool(name=\"Sample Agent Pool\")\npulumi.export(\"name\", pool.name)\npulumi.export(\"poolType\", pool.pool_type)\npulumi.export(\"autoProvision\", pool.auto_provision)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"Sample Agent Pool\",\n        }));\n        this.Name = pool.Apply(pool =\u003e pool.Name);\n        this.PoolType = pool.Apply(pool =\u003e pool.PoolType);\n        this.AutoProvision = pool.Apply(pool =\u003e pool.AutoProvision);\n    }\n\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"Sample Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", pool.Name)\n\t\tctx.Export(\"poolType\", pool.PoolType)\n\t\tctx.Export(\"autoProvision\", pool.AutoProvision)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "name",
                    "poolType",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPools:getPools": {
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pools = azuredevops.getPools({});\nexport const agentPoolName = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.name));\nexport const autoProvision = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.autoProvision));\nexport const poolType = pools.then(pools =\u003e pools.agentPools.map(__item =\u003e __item.poolType));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npools = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in pools.agent_pools])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in pools.agent_pools])\npulumi.export(\"poolType\", [__item.pool_type for __item in pools.agent_pools])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pools = Output.Create(AzureDevOps.GetPools.InvokeAsync());\n        this.AgentPoolName = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.Name).ToList());\n        this.AutoProvision = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.AutoProvision).ToList());\n        this.PoolType = pools.Apply(pools =\u003e pools.AgentPools.Select(__item =\u003e __item.PoolType).ToList());\n    }\n\n    [Output(\"agentPoolName\")]\n    public Output\u003cstring\u003e AgentPoolName { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpools, err := azuredevops.GetPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []string\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat0 = append(splat0, val0.Name)\n\t\t}\n\t\tctx.Export(\"agentPoolName\", splat0)\n\t\tvar splat1 []bool\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat1 = append(splat1, val0.AutoProvision)\n\t\t}\n\t\tctx.Export(\"autoProvision\", splat1)\n\t\tvar splat2 []string\n\t\tfor _, val0 := range pools.AgentPools {\n\t\t\tsplat2 = append(splat2, val0.PoolType)\n\t\t}\n\t\tctx.Export(\"poolType\", splat2)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProject:getProject": {
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"Sample Project\",\n});\nexport const id = project.then(project =\u003e project.id);\nexport const projectName = project.then(project =\u003e project.projectName);\nexport const visibility = project.then(project =\u003e project.visibility);\nexport const versionControl = project.then(project =\u003e project.versionControl);\nexport const workItemTemplate = project.then(project =\u003e project.workItemTemplate);\nexport const processTemplateId = project.then(project =\u003e project.processTemplateId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"Sample Project\")\npulumi.export(\"id\", project.id)\npulumi.export(\"projectName\", project.project_name)\npulumi.export(\"visibility\", project.visibility)\npulumi.export(\"versionControl\", project.version_control)\npulumi.export(\"workItemTemplate\", project.work_item_template)\npulumi.export(\"processTemplateId\", project.process_template_id)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"Sample Project\",\n        }));\n        this.Id = project.Apply(project =\u003e project.Id);\n        this.ProjectName = project.Apply(project =\u003e project.ProjectName);\n        this.Visibility = project.Apply(project =\u003e project.Visibility);\n        this.VersionControl = project.Apply(project =\u003e project.VersionControl);\n        this.WorkItemTemplate = project.Apply(project =\u003e project.WorkItemTemplate);\n        this.ProcessTemplateId = project.Apply(project =\u003e project.ProcessTemplateId);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n    [Output(\"projectName\")]\n    public Output\u003cstring\u003e ProjectName { get; set; }\n    [Output(\"visibility\")]\n    public Output\u003cstring\u003e Visibility { get; set; }\n    [Output(\"versionControl\")]\n    public Output\u003cstring\u003e VersionControl { get; set; }\n    [Output(\"workItemTemplate\")]\n    public Output\u003cstring\u003e WorkItemTemplate { get; set; }\n    [Output(\"processTemplateId\")]\n    public Output\u003cstring\u003e ProcessTemplateId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"Sample Project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", project.Id)\n\t\tctx.Export(\"projectName\", project.ProjectName)\n\t\tctx.Export(\"visibility\", project.Visibility)\n\t\tctx.Export(\"versionControl\", project.VersionControl)\n\t\tctx.Export(\"workItemTemplate\", project.WorkItemTemplate)\n\t\tctx.Export(\"processTemplateId\", project.ProcessTemplateId)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "projectName",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProjects:getProjects": {
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst test = azuredevops.getProjects({\n    projectName: \"contoso\",\n    state: \"wellFormed\",\n});\nexport const projectId = test.then(test =\u003e test.projects.map(__item =\u003e __item.projectId));\nexport const projectName = test.then(test =\u003e test.projects.map(__item =\u003e __item.name));\nexport const projectUrl = test.then(test =\u003e test.projects.map(__item =\u003e __item.projectUrl));\nexport const state = test.then(test =\u003e test.projects.map(__item =\u003e __item.state));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntest = azuredevops.get_projects(project_name=\"contoso\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in test.projects])\npulumi.export(\"projectName\", [__item.name for __item in test.projects])\npulumi.export(\"projectUrl\", [__item.project_url for __item in test.projects])\npulumi.export(\"state\", [__item.state for __item in test.projects])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(AzureDevOps.GetProjects.InvokeAsync(new AzureDevOps.GetProjectsArgs\n        {\n            ProjectName = \"contoso\",\n            State = \"wellFormed\",\n        }));\n        this.ProjectId = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.ProjectId).ToList());\n        this.ProjectName = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.Name).ToList());\n        this.ProjectUrl = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.ProjectUrl).ToList());\n        this.State = test.Apply(test =\u003e test.Projects.Select(__item =\u003e __item.State).ToList());\n    }\n\n    [Output(\"projectId\")]\n    public Output\u003cstring\u003e ProjectId { get; set; }\n    [Output(\"projectName\")]\n    public Output\u003cstring\u003e ProjectName { get; set; }\n    [Output(\"projectUrl\")]\n    public Output\u003cstring\u003e ProjectUrl { get; set; }\n    [Output(\"state\")]\n    public Output\u003cstring\u003e State { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"contoso\"\n\t\topt1 := \"wellFormed\"\n\t\ttest, err := azuredevops.GetProjects(ctx, \u0026azuredevops.GetProjectsArgs{\n\t\t\tProjectName: \u0026opt0,\n\t\t\tState:       \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat0 = append(splat0, val0.ProjectId)\n\t\t}\n\t\tctx.Export(\"projectId\", splat0)\n\t\tvar splat1 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat1 = append(splat1, val0.Name)\n\t\t}\n\t\tctx.Export(\"projectName\", splat1)\n\t\tvar splat2 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat2 = append(splat2, val0.ProjectUrl)\n\t\t}\n\t\tctx.Export(\"projectUrl\", splat2)\n\t\tvar splat3 []string\n\t\tfor _, val0 := range test.Projects {\n\t\t\tsplat3 = append(splat3, val0.State)\n\t\t}\n\t\tctx.Export(\"state\", splat3)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "azuredevops:index/getRepositories:getRepositories": {
            "description": "Use this data source to access information about an existing Git Repositories within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    projectName: \"contoso-project\",\n});\nconst allRepos = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    includeHidden: true,\n}));\nconst singleRepo = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    name: \"contoso-repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(project_name=\"contoso-project\")\nall_repos = azuredevops.get_repositories(project_id=project.id,\n    include_hidden=True)\nsingle_repo = azuredevops.get_repositories(project_id=project.id,\n    name=\"contoso-repo\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            ProjectName = \"contoso-project\",\n        }));\n        var allRepos = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            IncludeHidden = true,\n        })));\n        var singleRepo = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            Name = \"contoso-repo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tProjectName: \"contoso-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := project.Id\n\t\topt1 := true\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId:     \u0026opt0,\n\t\t\tIncludeHidden: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt2 := project.Id\n\t\topt3 := \"contoso-repo\"\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId: \u0026opt2,\n\t\t\tName:      \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            }
        },
        "azuredevops:index/getUsers:getUsers": {
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n// Load single user by using it's principal name\nconst user = pulumi.output(azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n}, { async: true }));\n// Load all users know inside an organization\nconst all_users = pulumi.output(azuredevops.getUsers({ async: true }));\n// Load all users know inside an organization originating from a specific source (origin)\nconst all_from_origin = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n}, { async: true }));\n// Load all users know inside an organization filtered by their subject types\nconst all_from_subject_types = pulumi.output(azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n}, { async: true }));\n// Load a single user by origin and origin ID\nconst all_from_origin_id = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nall_users = azuredevops.get_users()\nall_from_origin = azuredevops.get_users(origin=\"aad\")\nall_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nall_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n        }));\n        var all_users = Output.Create(AzureDevOps.GetUsers.InvokeAsync());\n        var all_from_origin = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n        }));\n        var all_from_subjectTypes = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            SubjectTypes = \n            {\n                \"aad\",\n                \"msa\",\n            },\n        }));\n        var all_from_origin_id = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n            OriginId = \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"contoso-user@contoso.onmicrosoft.com\"\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tPrincipalName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"aad\"\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt2 := \"aad\"\n\t\topt3 := \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\"\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin:   \u0026opt2,\n\t\t\tOriginId: \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:/getUsersUser:getUsersUser"
                        },
                        "description": "A list of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "azuredevops": "AzureDevOps"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Azure DevOps.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-azuredevops` repo](https://github.com/terraform-providers/terraform-provider-azuredevops/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-azuredevops` repo](https://github.com/terraform-providers/terraform-provider-azuredevops/issues).",
            "requires": {
                "pulumi": "\u003e=2.9.0,\u003c3.0.0"
            },
            "usesIOClasses": true
        }
    }
}