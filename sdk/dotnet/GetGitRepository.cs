// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetGitRepository
    {
        public static Task<GetGitRepositoryResult> InvokeAsync(GetGitRepositoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGitRepositoryResult>("azuredevops:index/getGitRepository:getGitRepository", args ?? new GetGitRepositoryArgs(), options.WithVersion());
    }


    public sealed class GetGitRepositoryArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetGitRepositoryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGitRepositoryResult
    {
        public readonly string DefaultBranch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsFork;
        public readonly string Name;
        public readonly string ProjectId;
        public readonly string RemoteUrl;
        public readonly int Size;
        public readonly string SshUrl;
        public readonly string Url;
        public readonly string WebUrl;

        [OutputConstructor]
        private GetGitRepositoryResult(
            string defaultBranch,

            string id,

            bool isFork,

            string name,

            string projectId,

            string remoteUrl,

            int size,

            string sshUrl,

            string url,

            string webUrl)
        {
            DefaultBranch = defaultBranch;
            Id = id;
            IsFork = isFork;
            Name = name;
            ProjectId = projectId;
            RemoteUrl = remoteUrl;
            Size = size;
            SshUrl = sshUrl;
            Url = url;
            WebUrl = webUrl;
        }
    }
}
